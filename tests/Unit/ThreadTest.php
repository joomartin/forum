<?php

namespace Tests\Unit;

use App\Channel;
use App\Notifications\ThreadWasUpdated;
use App\Thread;
use App\User;
use Carbon\Carbon;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Support\Facades\Notification;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class ThreadTest extends TestCase
{
    use DatabaseMigrations;

    /**
     * @var Thread
     */
    protected $thread;

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->thread = create('Thread');
    }

    /** @test */
    public function a_thread_has_replies()
    {
        $this->assertInstanceOf(Collection::class, $this->thread->replies);
    }

    /** @test */
    public function a_thread_has_a_creator()
    {
        $this->assertInstanceOf(User::class, $this->thread->creator);
    }

    /** @test */
    public function a_thread_belongs_to_a_channel()
    {
        $this->assertInstanceOf(Channel::class, $this->thread->channel);
    }

    /** @test */
    public function it_can_make_a_string_path()
    {
        $thread = create('Thread');

        $this->assertEquals(
            "/threads/{$thread->channel->slug}/$thread->id",
            $thread->path()
        );

        $this->assertEquals(
            "/threads/{$thread->channel->slug}/$thread->id/replies",
            $thread->path('replies')
        );
    }

    /** @test */
    public function a_thread_can_add_a_reply()
    {
        $this->thread->addReply([
            'body'      => 'foo',
            'user_id'   => 1
        ]);

        $this->assertCount(1, $this->thread->replies);
    }

    /** @test */
    public function a_thread_notifies_all_registered_subscribers_when_a_reply_is_added()
    {
        Notification::fake();

        $this->signIn()
            ->thread
            ->subscribe()
            ->addReply([
                'body'      => 'foo',
                'user_id'   => create('User')->id
            ]);

        Notification::assertSentTo(auth()->user(), ThreadWasUpdated::class);
    }

    /** @test */
    public function a_thread_can_be_subscribed_to()
    {
        // Given we have a thread
        $thread = create('Thread');
        // And a user
        $this->signIn();

        // When the user subscribes to the thread
        $thread->subscribe();

        // Then it appears in database
        $this->assertCount(
            1,
            $thread->subscriptions()->where('user_id', auth()->id())->get()
        );
    }

    /** @test */
    public function a_thread_can_be_unsubscribed_from()
    {
        // Given we have a thread
        $thread = create('Thread');
        // And a user
        $this->signIn();

        $thread->subscribe();

        // When the user unsubscribes from the thread
        $thread->unsubscribe();

        // Then it appears in database
        $this->assertCount(
            0,
            $thread->subscriptions()->where('user_id', auth()->id())->get()
        );
    }

    /** @test */
    public function it_knows_if_the_current_user_is_subscribed_to_it()
    {
        $this->signIn();

        $thread = create('Thread');

        $this->assertFalse($thread->isSubscribedTo);

        $thread->subscribe();

        $this->assertTrue($thread->isSubscribedTo);
    }

    /** @test */
    public function a_thread_can_check_if_auth_user_has_read_all_replies()
    {
        $this->signIn();

        $thread = create('Thread');

        tap(auth()->user(), function ($user) use ($thread) {
            $this->assertTrue($thread->hasUpdatesFor($user));

            $user->read($thread);

            $this->assertFalse($thread->hasUpdatesFor($user));
        });

    }
}
